{ log, getLines, int, sum, desc } from ../utils.civet

type Hand
  cards: string
  bid: number
  type: number

lines := getLines import.meta.url

log 'Part 1', sum getWins(lines, false)
log 'Part 2', sum getWins(lines, true)

function getWins(lines: string[], joker: boolean)
  lines
    .map (line) => parseHand(line, joker)
    .sort compareHands
    .map (hand, i) => hand.bid * (i + 1)

function parseHand(line: string, joker: boolean): Hand
  [cards, bid] .= line.split ' '
  cards: fixCardsStrength cards, joker
  bid: int bid
  type: getType cards, joker

function getType(cards: string, joker: boolean)
  counter := count cards.replaceAll joker ? 'J' : '', ''
  if joker then (counter.0 ?= 0) += cards.match(/J/g) || [] |> .length
  switch counter
    [5] 6
    [4, 1] 5
    [3, 2] 4
    [3, 1, 1] 3
    [2, 2, 1] 2
    [2, 1, 1, 1] 1
    [...] 0

function count(cards: string)
  counter: Record<string, number> := {}
  for card of cards.split ''
    (counter[card] ?= 0)++
  Object.values(counter).sort desc

function compareHands(a: Hand, b: Hand)
  a.type is b.type
    ? a.cards > b.cards ? 1 : -1
    : a.type - b.type

function fixCardsStrength(cards: string, joker: boolean)
  cards = cards
    .replaceAll 'A', 'E'
    .replaceAll 'K', 'D'
    .replaceAll 'Q', 'C'
    .replaceAll 'J', joker ? '1' : 'B'
    .replaceAll 'T', 'A'
