{ log, getInput, toNumbers, inRange, chunk, min } from ../utils.civet

input := getInput(import.meta.url).split '\n\n'
seeds := toNumbers input.0
mappings := input[1..].map &.split('\n')[1..].map toNumbers

function translate(nr: number, map: number[][])
  range := map.find (map) => inRange map.1, nr, map.1 + map.2
  range ? nr + range.0 - range.1 : nr

function getMin(seeds: number[])
  min .= Infinity
  for let seed of seeds
    for map of mappings
      seed = translate seed, map
    min = seed if seed < min
  min

log 'Part 1', getMin seeds
log 'Part 2', min chunk(seeds, 2).map [start, length] =>
  getMin [start...start + length]

// omptimzed part 2 -> src/05/index2.civet
